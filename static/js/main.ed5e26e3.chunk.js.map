{"version":3,"sources":["component/pokemon.js","App.js","reportWebVitals.js","index.js"],"names":["PokemonAnker","id","image","name","type","style","className","src","alt","App","useState","allPokemons","setAllPokemons","Math","floor","random","loadMore","setLoadMore","getAllPokemons","createPokemonObject","a","results","forEach","pokemon","fetch","res","json","data","currentList","sort","b","console","log","next","useEffect","map","pokemonStats","index","sprites","other","dream_world","front_default","types","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAkBeA,EAhBM,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,GAAIC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,KACjCC,GAD2D,iBACnDD,EAAO,oBACrB,OACE,sBAAKE,UAAWD,EAAhB,UACE,qBAAKC,UAAU,SAAf,SACE,uCAAUL,OAEZ,qBAAKM,IAAKL,EAAOM,IAAKL,IACtB,sBAAKG,UAAU,iBAAf,UACE,6BAAKH,IACL,2CAAcC,YC6CPK,EAtDH,WACV,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCF,mBAAS,2CAAD,OACKG,KAAKC,MAAsB,GAAhBD,KAAKE,YAD7D,mBAAOC,EAAP,KAAiBC,EAAjB,KAIMC,EAAc,uCAAG,qBAMZC,EANY,SAAAC,EAAA,6DAMZD,EANY,SAMQE,GAC3BA,EAAQC,QAAR,uCAAgB,WAAOC,GAAP,iBAAAH,EAAA,sEACII,MAAM,qCAAD,OACgBD,EAAQpB,OAFjC,cACRsB,EADQ,gBAIKA,EAAIC,OAJT,cAIRC,EAJQ,OAKdf,GAAe,SAACgB,GAAD,4BAAqBA,GAArB,CAAkCD,OALnC,SAMRhB,EAAYkB,MAAK,SAACT,EAAGU,GAAJ,OAAUV,EAAEnB,GAAK6B,EAAE7B,MAN5B,OAOd8B,QAAQC,IAAIrB,GAPE,4CAAhB,wDAPmB,SACHa,MAAMR,GADH,cACfS,EADe,gBAEFA,EAAIC,OAFF,OAEfC,EAFe,OAIrBV,EAAYU,EAAKM,MAajBd,EAAoBQ,EAAKN,SAjBJ,2CAAH,qDAwBpB,OAJAa,qBAAU,WACRhB,MACC,IAGD,sBAAKZ,UAAU,gBAAf,UACE,oBAAIA,UAAU,SAAd,2BACA,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,gBAAf,SACGK,EAAYwB,KAAI,SAACC,EAAcC,GAAf,OACf,cAAC,EAAD,CAEEpC,GAAImC,EAAanC,GACjBC,MAAOkC,EAAaE,QAAQC,MAAMC,YAAYC,cAC9CtC,KAAMiC,EAAajC,KACnBC,KAAMgC,EAAaM,MAAM,GAAGtC,KAAKD,MAJ5BkC,QASX,wBAAQ/B,UAAU,YAAYqC,QAAS,kBAAMzB,KAA7C,8BCrCO0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ed5e26e3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst PokemonAnker = ({ id, image, name, type, ...otherProps }) => {\r\n  const style = type + \" thumb-container\";\r\n  return (\r\n    <div className={style}>\r\n      <div className=\"number\">\r\n        <small>#0{id}</small>\r\n      </div>\r\n      <img src={image} alt={name} />\r\n      <div className=\"detail-wrapper\">\r\n        <h3>{name}</h3>\r\n        <small>Type: {type}</small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonAnker;\r\n","import React, { useEffect, useState } from \"react\";\nimport PokemonAnker from \"./component/pokemon\";\n\nconst App = () => {\n  const [allPokemons, setAllPokemons] = useState([]);\n  const [loadMore, setLoadMore] = useState(\n    `https://pokeapi.co/api/v2/pokemon?limit=${Math.floor(Math.random() * 10)}`\n  );\n\n  const getAllPokemons = async () => {\n    const res = await fetch(loadMore);\n    const data = await res.json();\n\n    setLoadMore(data.next);\n\n    function createPokemonObject(results) {\n      results.forEach(async (pokemon) => {\n        const res = await fetch(\n          `https://pokeapi.co/api/v2/pokemon/${pokemon.name}`\n        );\n        const data = await res.json();\n        setAllPokemons((currentList) => [...currentList, data]);\n        await allPokemons.sort((a, b) => a.id - b.id);\n        console.log(allPokemons);\n      });\n    }\n    createPokemonObject(data.results);\n  };\n\n  useEffect(() => {\n    getAllPokemons();\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"header\">Pokemon Decks</h1>\n      <div className=\"pokemon-container\">\n        <div className=\"all-container\">\n          {allPokemons.map((pokemonStats, index) => (\n            <PokemonAnker\n              key={index}\n              id={pokemonStats.id}\n              image={pokemonStats.sprites.other.dream_world.front_default}\n              name={pokemonStats.name}\n              type={pokemonStats.types[0].type.name}\n            />\n          ))}\n        </div>\n\n        <button className=\"load-more\" onClick={() => getAllPokemons()}>\n          Load more\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}